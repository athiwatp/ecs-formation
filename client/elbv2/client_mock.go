// Automatically generated by MockGen. DO NOT EDIT!
// Source: client/elbv2/client.go

package elbv2

import (
	elbv2 "github.com/aws/aws-sdk-go/service/elbv2"
	gomock "github.com/golang/mock/gomock"
)

// Mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *_MockClientRecorder
}

// Recorder for MockClient (not exported)
type _MockClientRecorder struct {
	mock *MockClient
}

func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &_MockClientRecorder{mock}
	return mock
}

func (_m *MockClient) EXPECT() *_MockClientRecorder {
	return _m.recorder
}

func (_m *MockClient) DescribeLoadBalancers(names []string) (*elbv2.DescribeLoadBalancersOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeLoadBalancers", names)
	ret0, _ := ret[0].(*elbv2.DescribeLoadBalancersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClientRecorder) DescribeLoadBalancers(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeLoadBalancers", arg0)
}

func (_m *MockClient) CreateRule(params *elbv2.CreateRuleInput) ([]*elbv2.Rule, error) {
	ret := _m.ctrl.Call(_m, "CreateRule", params)
	ret0, _ := ret[0].([]*elbv2.Rule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClientRecorder) CreateRule(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateRule", arg0)
}

func (_m *MockClient) DeleteRule(ruleArn string) error {
	ret := _m.ctrl.Call(_m, "DeleteRule", ruleArn)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockClientRecorder) DeleteRule(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteRule", arg0)
}

func (_m *MockClient) DescribeRule(params *elbv2.DescribeRulesInput) ([]*elbv2.Rule, error) {
	ret := _m.ctrl.Call(_m, "DescribeRule", params)
	ret0, _ := ret[0].([]*elbv2.Rule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClientRecorder) DescribeRule(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeRule", arg0)
}

func (_m *MockClient) ModifyRule(params *elbv2.ModifyRuleInput) ([]*elbv2.Rule, error) {
	ret := _m.ctrl.Call(_m, "ModifyRule", params)
	ret0, _ := ret[0].([]*elbv2.Rule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClientRecorder) ModifyRule(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ModifyRule", arg0)
}

func (_m *MockClient) CreateTargetGroup(params *elbv2.CreateTargetGroupInput) ([]*elbv2.TargetGroup, error) {
	ret := _m.ctrl.Call(_m, "CreateTargetGroup", params)
	ret0, _ := ret[0].([]*elbv2.TargetGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClientRecorder) CreateTargetGroup(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateTargetGroup", arg0)
}

func (_m *MockClient) DeleteTargetGroup(targetGroupArn string) error {
	ret := _m.ctrl.Call(_m, "DeleteTargetGroup", targetGroupArn)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockClientRecorder) DeleteTargetGroup(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteTargetGroup", arg0)
}

func (_m *MockClient) DescribeTargetGroup(groupNames []string) (map[string]*elbv2.TargetGroup, error) {
	ret := _m.ctrl.Call(_m, "DescribeTargetGroup", groupNames)
	ret0, _ := ret[0].(map[string]*elbv2.TargetGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClientRecorder) DescribeTargetGroup(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeTargetGroup", arg0)
}

func (_m *MockClient) ModifyTargetGroup(params *elbv2.ModifyTargetGroupInput) ([]*elbv2.TargetGroup, error) {
	ret := _m.ctrl.Call(_m, "ModifyTargetGroup", params)
	ret0, _ := ret[0].([]*elbv2.TargetGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClientRecorder) ModifyTargetGroup(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ModifyTargetGroup", arg0)
}

func (_m *MockClient) DescribeTargetHealth(targetGroupArn string) ([]*elbv2.TargetHealthDescription, error) {
	ret := _m.ctrl.Call(_m, "DescribeTargetHealth", targetGroupArn)
	ret0, _ := ret[0].([]*elbv2.TargetHealthDescription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClientRecorder) DescribeTargetHealth(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeTargetHealth", arg0)
}
